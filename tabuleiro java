import java.util.Scanner;

public class JogoDaVelha {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Tabuleiro 3x3 inicializado com células vazias representadas por '-'
        char[][] tabuleiro = {
            {'-', '-', '-'},
            {'-', '-', '-'},
            {'-', '-', '-'}
        };

        char jogadorAtual = 'X'; // Primeiro jogador começa com 'X'
        boolean jogoAtivo = true;

        System.out.println("Bem-vindo ao Jogo da Velha!");
        exibirTabuleiro(tabuleiro);

        while (jogoAtivo) {
            System.out.printf("Jogador %c, escolha uma linha (1-3) e uma coluna (1-3):%n", jogadorAtual);

            int linha, coluna;
            try {
                // Lê entrada do jogador (ajustada para 1-3)
                linha = scanner.nextInt() - 1;
                coluna = scanner.nextInt() - 1;

                // Verifica se a entrada está dentro dos limites e se a célula está vazia
                if (linha < 0 || linha > 2 || coluna < 0 || coluna > 2 || tabuleiro[linha][coluna] != '-') {
                    System.out.println("Jogada inválida! Tente novamente.");
                    continue; // Volta ao início do loop
                }

                // Atualiza o tabuleiro com o símbolo do jogador atual
                tabuleiro[linha][coluna] = jogadorAtual;

                // Exibe o tabuleiro atualizado
                exibirTabuleiro(tabuleiro);

                // Verifica se o jogador atual venceu
                if (verificarVitoria(tabuleiro, jogadorAtual)) {
                    System.out.printf("Parabéns! O jogador %c venceu!%n", jogadorAtual);
                    jogoAtivo = false; // Finaliza o jogo
                } 
                // Verifica se houve empate
                else if (verificarEmpate(tabuleiro)) {
                    System.out.println("Empate! O tabuleiro está cheio.");
                    jogoAtivo = false; // Finaliza o jogo
                } 
                // Alterna para o próximo jogador
                else {
                    jogadorAtual = (jogadorAtual == 'X') ? 'O' : 'X';
                }
            } catch (Exception e) {
                // Trata entradas inválidas
                System.out.println("Entrada inválida! Por favor, insira números entre 1 e 3.");
                scanner.next(); // Limpa a entrada inválida
            }
        }

        // Oferece a opção de jogar novamente
        System.out.println("Deseja jogar novamente? (s/n)");
        char resposta = scanner.next().charAt(0);
        if (resposta == 's' || resposta == 'S') {
            main(null); // Reinicia o jogo
        } else {
            System.out.println("Obrigado por jogar!");
        }

        scanner.close(); // Fecha o scanner
    }

    public static void exibirTabuleiro(char[][] tabuleiro) {
        System.out.println("Tabuleiro:");
        for (char[] linha : tabuleiro) {
            for (char celula : linha) {
                System.out.print(celula + " ");
            }
            System.out.println();
        }
    }

    public static boolean verificarVitoria(char[][] tabuleiro, char jogador) {
        for (int i = 0; i < 3; i++) {
            if (tabuleiro[i][0] == jogador && tabuleiro[i][1] == jogador && tabuleiro[i][2] == jogador) return true;
            if (tabuleiro[0][i] == jogador && tabuleiro[1][i] == jogador && tabuleiro[2][i] == jogador) return true;
        }
        if (tabuleiro[0][0] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][2] == jogador) return true;
        if (tabuleiro[0][2] == jogador && tabuleiro[1][1] == jogador && tabuleiro[2][0] == jogador) return true;

        return false;
    }

    public static boolean verificarEmpate(char[][] tabuleiro) {
        for (char[] linha : tabuleiro) {
            for (char celula : linha) {
                if (celula == '-') {
                    return false;
                }
            }
        }
        return true;
    }
}
